# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Build, Package & Release

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-renderer:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2022

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Compile-Tool-OmniverseHelper
      working-directory: "${{ github.workspace }}/TOOLS/omniversehelper"
      run: |
        mkdir "${{github.workspace}}/BIN/DEV/omniversehelper"
        go build -o "${{github.workspace}}/BIN/DEV/omniversehelper"

    - name: Compile-Tool-ScreenshotComparison
      working-directory: "${{ github.workspace }}/TOOLS/screenshotcomparison"
      run: |
        mkdir "${{github.workspace}}/BIN/DEV/screenshotcomparison"
        go build -o "${{github.workspace}}/BIN/DEV/screenshotcomparison"
        copy "index.template.html" "${{github.workspace}}/BIN/DEV/screenshotcomparison"
      
    - name: Configure CMake
      env:
        CICD_REFNAME: ${{  github.ref_name }}
        CICD_REF: ${{ github.ref }}
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -G"Visual Studio 17 2022" -A win32 -DEE_DEUSEXFOLDER=${{github.workspace}}/dist
      
    - name: Compile-Renderer
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Install-Renderer
      run: cmake --install ${{github.workspace}}/build --config Release

    - name: Upload binaries
      uses: actions/upload-artifact@v4.3.1
      with:
        name: DeusExEchelonRenderer-${{github.sha}}-${{github.run_number}}
        path: |
          ${{github.workspace}}/dist/*
          ${{github.workspace}}/BIN/DEV/*

    - name: Fetch core-mod
      working-directory: "${{ github.workspace }}"
      if: ${{startsWith(github.ref, 'refs/tags/v') }}
      run: |
          mkdir temp
          cd temp
          git clone --no-checkout https://github.com/onnoj/DeusExEchelonRenderer-RemixProject.git .
          git sparse-checkout init --cone
          git sparse-checkout set DeusEx/package
          git checkout
          cd DeusEx/package
          
    - name: package
      working-directory: ${{ github.workspace }}
      if: ${{startsWith(github.ref, 'refs/tags/v') }}
      run: |
          cd dist
          mkdir rtx-remix\mods\DeusExEchelonRenderer
          copy -Recurse "${{ github.workspace }}\temp\DeusEx\package\*" rtx-remix\mods\DeusExEchelonRenderer\
          7z a "..\DeusExEchelonRenderer-${{  github.ref_name }}.zip" *
          7z a "..\DeusExEchelonRenderer-${{  github.ref_name }}-devtools.zip" "${{github.workspace}}/BIN/DEV/*"
    - name: upload binaries to release
      uses: softprops/action-gh-release@v2.0.4
      if: ${{startsWith(github.ref, 'refs/tags/v') }}
      with:
          files: |
            DeusExEchelonRenderer-${{  github.ref_name }}.zip
            DeusExEchelonRenderer-${{  github.ref_name }}-devtools.zip
